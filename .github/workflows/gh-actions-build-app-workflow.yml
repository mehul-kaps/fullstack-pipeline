name: build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up the Java JDK
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Build with Maven
      run: mvn -B test
      
    - name: Upload Jacoco Report artifacts
      uses: actions/upload-artifact@v3
      with:
        name: jacoco-report-artifacts
        path: target/

    - name: Generate JaCoCo Badge
      id: jacoco
      uses: cicirello/jacoco-badge-generator@v2
      with:
        generate-branches-badge: true
        jacoco-csv-file: target/site/jacoco/jacoco.csv

    - name: Set coverage environments variables
      env:
        GH_COVERAGE: ${{ steps.jacoco.outputs.coverage }}
        GH_BRANCH_COVERAGE: ${{ steps.jacoco.outputs.branches }}
        NUM: ${{ steps.jacoco.outputs.branches }}
      run: |
          echo "GITHUB_RUN_NUMBER_WITH_OFFSET=$(($NUM * 200))" >> $GITHUB_ENV
          echo "COVERAGE=$(echo $GH_COVERAGE*100 | bc)" >> $GITHUB_ENV
          echo "BRANCH_COVERAGE=$(echo $GH_BRANCH_COVERAGE*100 | bc)" >> $GITHUB_ENV
          
                     echo "Try reading file."
           echo "${PWD}"
           echo "$(cat ./target/site/jacoco/jacoco.csv)"
           
           github_comment="| FullyQualified Class Name  | Coverage Percentage |\n| ------------- | ------------- |\n"

  
           while read -r line
           do
            echo "========================================================"
            printf "%s\n" "$line"
            IFS=', ' read -r -a array <<< "$line"
            echo "HEYYYYYYYY ${array[0]}"
            if [ "${array[0]}" = "GROUP" ]; then
                 continue;
            fi 

            echo "${array[1]}.${array[2]}"
            echo "${array[3]}"
            echo "${array[4]}"
            missed=${array[3]}
            covered=${array[4]}
            covered_plus_missed=$( echo $missed+$covered  | bc )
            echo "covered_plus_missed:" $covered_plus_missed
            res=$( echo "scale=2; $covered / $covered_plus_missed"  | bc )
            COVERAGE_PCT=$( echo $res*100  | bc )
            echo $COVERAGE_PCT%
            github_comment="${github_comment}|${array[1]}.${array[2]} | $COVERAGE_PCT % |\n"
            done < './target/site/jacoco/jacoco.csv'
            
            echo "GITHUB_COMMENT_FINAL=$github_comment" >> $GITHUB_ENV

          
    - name: Log coverage percentage
      run: |
        echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
        echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"
        echo "HEDO-1 [$COVERAGE]"
        echo "HEDO-1 [$BRANCH_COVERAGE]"
        echo "HEDO-2 ${{ env.COVERAGE }}"
        echo "HEDO-2 ${{ env.BRANCH_COVERAGE }}"
        
        echo "COVERAGE_ROUNDED=$(echo $COVERAGE | awk '{printf("%d\n",$1 + 0.5)}')"  >> $GITHUB_ENV 
        echo "BRANCH_COVERAGE_ROUNDED=$(echo $BRANCH_COVERAGE | awk '{printf("%d\n",$1 + 0.5)}')"  >> $GITHUB_ENV
           
    - name: Comment coverage statistics on Pull Requet(PR)        
      uses: actions/github-script@v6
      with:
        script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## JaCoCo Test Coverage Summary <br>\n * __Coverage:__ ${{ env.COVERAGE_ROUNDED }} % <br>\n * __Branches:__ ${{ env.BRANCH_COVERAGE_ROUNDED }}% \n\n  ${{ env.GITHUB_COMMENT_FINAL }}'
            })
            
    - name: 'Check Coverate Minimum Thresold, FAIL the workflow if below Thresold'
      run: |
           echo "Success! ${{ env.GITHUB_RUN_NUMBER_WITH_OFFSET }}"
           echo "Success! ${{ env.COVERAGE }}"
           echo "Success! ${{ env.BRANCH_COVERAGE }}"
           if [[ $(echo "$COVERAGE <= 80.00" | bc -l) -eq 1 ]]; then
              echo "Coverage $COVERAGE is less than 80%, We must fail here."
              exit 1
           fi  
            
    - name: 'GitHub HTML Markup Comment - FINAL'
      run: |
          echo -e $GITHUB_COMMENT_FINAL

    - name: List Changed Files
      run: |
        echo "Event name: ${{ github.event_name }}"
        
        #if [ "${{ github.event_name }}" == "pull_request" ]; then
          # For pull_request events, list the changed files
          #echo "Changed files: for"
          #echo $GITHUB_REF
          #OUTPUT=$(git diff master..$GITHUB_REF --name-only)
          echo "Below are the changed files.\n"
          #echo $OUTPUT
        #fi
        
    - name: List Changed Files NEW
      run: |
        echo "Changed Files: START"
        git fetch origin $GITHUB_BASE_REF:$GITHUB_BASE_REF
        git fetch origin $GITHUB_HEAD_REF:$GITHUB_HEAD_REF
        CHANGED_FILES=$(git diff --name-only $GITHUB_BASE_REF $GITHUB_HEAD_REF)
        echo "Changed Files: $CHANGED_FILES"
        
    - name: Run Trivy vulnerability scanner in fs mode
      id: trivy-scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        
    - name: Extract Trivy scan results
      id: extract-results
      run: echo "::set-output name=trivy-scan-results::$(echo ${{ steps.trivy-scan.outputs.trivy-scan-result }} | jq -c)"
   
    - name: Comment on PR with Trivy scan results
      uses: actions/github-script@v5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const results = JSON.parse('${{ steps.extract-results.outputs.trivy-scan-results }}');
          const comment = `
          Trivy Scan Results:
          \`\`\`
          ${JSON.stringify(results, null, 2)}
          \`\`\`
          `;
          github.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number,
            body: comment
          });